#ifndef SNAPSHOT_H
#define SNAPSHOT_H

#include <QVariantList>
#include <QFileInfo>
#include <QDate>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonValue>
#include <QVector>
#include <tuple>
#include <QStack>
#include <QFileSystemModel>
#include "../Hash Sum/HashSum.h"

/**
 * @brief Перечисление флагов состояния файла в директории (при сравнении)
 */
enum ComparisonFlags
{
    ////по сравнению с старым снапшотом файл:
    /// изменился
    edited,
    /// удален
    deleted,
    /// появился
    appeared
};

struct ComparisonAnswer
{
    QString path;
    ComparisonFlags flag;
};

/**
 * @brief Класс для сохранения информации о директории и записи информации в файл в формате JSON
 * @details Класс хранит в себе информацию(снапшот) о директории, а именно: имя директории, ее размер, контрольная сумма, дата последнего
 *          изменения, список снапщотов внутренних файлов директорий
 *
 *          Снапшоты сохраняют следующую информацию в виде JSON объектов со следующми ключами:
 *          "name" --- имя директории/файла/подпапки
 *          "size" --- размер директории/файла/подпапки
 *          "hash_sum" --- констрольная сумма директории/файла/подпапки
 *          "last_changed_date" --- дата последнего изменения директории/файла/подпапки
 *          "inner_files" --- список снапшотов внутренних файлов директории/подпапки
 *
 * @author [Лобанов Павел] (https://github.com/pmlobanov)
 * @todo Проверить корректность подсчета констрольных сумм для подпапок.
 * @todo Возможно придется сравнивать директории с помощью классов, дописать оператор сравнения.
 * @date 30.04.2024
 * @version 0.9.1
 */
class Snapshot : public QObject
{
    Q_OBJECT
    QWidget *parent;
    // ------------- Члены класса, хранящие информацию о директории -------------
    //
    /// Дата последнего изменения
    QString m_last_change_date;
    /// Список внутренних файлов директории
    QJsonArray m_inner_files;
    /// Контрольная сумма директории
    QString m_Hash_sum;
    /// Размер директории
    int m_size;
    /// Имя директории
    QString m_name;
    // ------------- Служебные члены класса -------------
    //
    /// Флаг, показывающий является снапшот директорией или нет.
    bool m_is_dir;
    /// Класс HashSum, используется для доступа к функциям, подсчета контрольных сумм файлов
    HashSum m_hash;
    /// Стек вызовов для функции collectInnerFilesInDir. Используется для отслеживания очередности в записи снапшотов
    /// внутренних папок/файлов директории при сборке списка внутренних файлов/папок директории
    QStack<int> m_calls;
    ///Алгоритм хэширования, исполбзующийся для подсчета контрольных сумм
    ALG_ID m_hash_algorithm;
    /// Путь до файла
    QString m_dir_path;
    /**
     * @brief Функция для формирования снапшота внутреннего файла/папки. Используется только для формирования
     *         списка внутренних файлов директории.
     * @details Функция формирует QJsonObject, внутреннего файла/папки, сохраняя о нем ту же информацию, что и для главной директории.
     *          Поле inner_files(внутренние файлы для подпапки) имееют только снапшоты подпапок. В случае, если подпапка пуста --- в JSON
     *          oblect помещается пустой список. Размер файла получается напрямую через информацию о файле, а папки из
     *          переменной counter.
     * @param file_path --- путь до внутренного файла/папки, для которого формируется снапшот.
     * @param inner_files --- список внутренних файлов для подпапки, которые будут записаны в поле inner_files снапшота. Может быть пустым
     * @param counter --- счетчик, несущий в себе размер подпапки. Используется только для сохранения размера подпапки.
     * @param hashsum --- контрольная сумма внутреннего файла/папки, для которого формируется снапшот.
     * @return Снапшот внутреннего файла/папки в виде QJsonObject.
     */
    QJsonObject createSnapshotFile (QString file_path ,QJsonArray inner_files, int& counter, QString& hashsum);

    /**
     * @brief Функция ля сбора снапшотов всех внутренних файлов/папок в список внутренних файлов директории
     * @param folder_path --- путь до директории, для которой формируем список внутренних файлов/папок
     * @param inner_files --- временный список внутренних файлов, в котором накапливаются внутренние файлы/папки для подпапки.
     *         после окончания работы функции, данные, хранящиеся там несут мало смысла. Изначально является пустым списком.
     * @param result --- результат работы функции, хранящий список внутренних файлов/папок директории, которые постпепенно в нем накапливаются
     *         Изначально является пустым списком.
     * @param counter --- счетчик, накапливающий размер подпапки, расчитываемой в данный момент. После подсчета размера подпапки обнуляется
     * @param hashString --- строка, накапляивающая контрольную сумму текущей подпапки. После подсчета размера подпапки обнуляется.
     *         Используется для подсчета общей кс всей директории.
     * @return Временный список внутренних файлов, для временной директории, значения которой не имеет смысла после выполнения функции.
     *         Настоящий результат работы функции сохраняется в параметре result.
     */
    QVariantList collectInnerFilesInDir(QString folder_path, QVariantList& inner_files, QJsonArray& result, int& counter,
                                        QString& hashString);

    /**
     * @brief Функция сохраняющая информацию о директории/файле в файл формата JSON
     * @details Функция создает JSON файл, куда сохраняет информацию, содержащуюся в полях класса путем создания словаря в QJsonobject.
     *          Если путь, получаемый в конструкторе введет к файлу, а не к директории, в JSON файл не записывается список внутренних файлов.
     *          Если параметр address являтся пустой строкой, сохранение файла происходит в папку с программой.
     * @param address --- путь в который сохраняется JSON-файл. По умолчанию сохраняет является пустой строкой.
     *
     * @return Созданный JSON файл в которой хранится следующая информация со следующими ключами:
     *          "name" --- имя директории/файла/подпапки
     *          "size" --- размер директории/файла/подпапки
     *          "hash_sum" --- констрольная сумма директории/файла/подпапки
     *          "last_changed_date" --- дата последнего изменения директории/файла/подпапки
     *          "inner_files" --- список снапшотов внутренних файлов директории/подпапки
     */
    void writeToFile(QString address = "");

    /**
     * @brief Функция создает словарь всех файлов, содрежащихся в снапшоте. Ключ - путь из директории до папки, занчение -
     *  контрольная сумма.
     * @details Рекурсивно проходит по массиву внутренних файлов снапшота, записывая в словарь путь и контрольную сумму
     * @todo Добавить сохранение ифнормации не только о кс, но и о альтернативных потоках
     * @param obj --- элемент QJsonObject, информация о внутренних папкой которого сохраняется в словарь
     * @param parent_dir --- путь до родительской папки. При запуске обычно указывается просто имя директории, которая является
     *        родительской для папки, описанной в QJsonObject
     * @param result --- результат работы функции. Словарь, содержащий информацию о файлах в папке в формате ключ-значение.
     * @return вектор result
     */
    QMap<QString, QString> createCompareMap (QJsonObject obj, QString& parent_dir, QMap<QString, QString>& result);

public:
    /**
     * @brief Конструктор класса Snapshot Заполняет поля класса информацией о директории из файла JSON
     * @details Конструктор расспарсивает файл формата JSON и заполняет поля класса соответсвующими значнеиями.
     * @param file_path --- путь до файла формата JSON, из которого берется информация о директории
     */
    Snapshot(QString file_path);
    Snapshot() {}
    /**
    * @brief Функция сравнивает два снапшота, возвращая вектор содержащий пару элементов - путь, флаг изменения
    * @details Функция создает по словарю для двух снапшотов с помощью функции createCompareMap, позже
    *          проходится по всем ключам словаря, сравнивая каждый файл из одной директории с другой.
    *          Если состояние файла в двух снапшотах различны, информация об этом (пара: путь до файла, флаг состояния)
    *          вкладывается в вектор изменненых файлов. Флаги состояния являются значениями перечисляемого
    *          типа ComparisonFlags.
    *
    * @param other --- снапшот, с которым будет происходить сравнение
    * @return Вектор измененных файлов
    */
   QVector<ComparisonAnswer> compareSnapshots(Snapshot& other);

public slots:
    /**
     * @brief calculate слот, заполняющий поля класса информацией о директории
     * Слот считывает информацию о директории из QFileInfo, и заполняет список внутренних файлов, размер директории и
     * контрольную сумму директории с помощью функции collectInnerFilesInDir. В случае, если перед нами файл, а не директория,
     * список внутренних файлов остается пустым, размер и кс заполняются как для обычного файла. Затем он записывает информацию в файл
     * методом writeToFile и испускает сигнал snapshotReady о готовности снапшота
     * @param dir_path Путь до директории, для которой создается снапшот
     * @param file_name Имя файла снапшота
     * @param hash_algorithm Алгоритм подсчета контрольной суммы
     * @param current_time Время создания снапшота
     */
    void calculate(const QString dir_path, const QString file_name,
                   const ALG_ID hash_algorithm, const QDateTime current_time);

signals:
    /**
     * @brief snapshotReady сигнал о завершении формирования снапшота
     * @param file_name Имя файла снапшота
     * @param current_time Время создания снапшота
     */
    void snapshotReady(const QString file_name, const QDateTime current_time);

    void errorOccured(const std::exception &e, const QString &file_path);
};

#endif // SNAPSHOT_H
